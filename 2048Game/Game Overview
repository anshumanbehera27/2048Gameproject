import random
def start_game():
    mat = []
    for i in range(4):
        mat.append([0]*4)
    return mat
def add_new_2(mat):
    r = random.randint(0,3)
    c = random.randint(0,3)
    while (mat[r][c] != 0 ):
         r = random.randint(0,3)
         c = random.randint(0,3)
    mat[r][c] = 2
def reverse(mat):
    new_mat = []
    for i in range(4):
        new_mat.append([])
        for j in range(4):
            new_mat[i].append(mat[i][4-j-1])
    return new_mat
def transpose(mat):
    new_mat = []
    for i in range(4):
        new_mat.append([])
        for j in range(4):
            new_mat[i].append(mat[j][i])
    return new_mat
def merg(mat):    # here we can add the 2 number in every moment if 2 number is eual and not wual to zero

    for i in range(4):
        for j in range(3):
            if (mat[i][j] == mat[i][j + 1] and mat[i][j] != 0):
                mat[i][j] = mat[i][j]*2  # multiwith 2 because we can only add the same number
                mat[i][j+1] = 0
    return mat


def compress(mat):
    new_mat = [] # creat a 4 * 4 new empty matrix
    for i in range(4):
        new_mat.append([0]*4)

    for i in range(4):
        pos = 0
        for j in range(4):
            if mat[i][j] != 0:
                new_mat[i][pos] = mat[i][j]
                pos += 1
    return new_mat
def move_up(grid):
    tranpose_grid = transpose(grid)
    new_grid = compress(tranpose_grid)
    new_grid = merg(new_grid)
    new_grid = compress(new_grid)
    final_grid = transpose(new_grid)
    return final_grid
def move_down(grid):
    tranpose_grid = transpose(grid)
    reversed_grid = reverse(tranpose_grid)
    new_grid = compress(reversed_grid)
    new_grid = merg(new_grid)
    new_grid = compress(new_grid)
    final_reverse_grid = reverse(new_grid)
    final_grid = transpose(final_reverse_grid)
    return final_grid

def move_right(grid):
    reverse_grid = reverse(grid)
    new_grid = compress(reverse_grid)
    new_grid = compress(new_grid)
    new_grid = merg(new_grid)
    new_grid = compress(new_grid)
    final_grid = reverse(new_grid)
    return final_grid



def move_left(grid): # we can move left
    new_grid = compress(grid)
    new_grid = merg(new_grid)
    new_grid = compress(new_grid)
    return  new_grid
# check the current state of the game

#  def move_up(grid):
#     #Implement This Function
#     pass

# def move_down(grid):
#     #Implement This Function
#     pass

# def move_right(grid):
#     #Implement This Function
#     pass

# def move_left(grid):
#     #Implement This Function
#     pass


mat = start_game()
mat[1][3] = 2
mat[2][2] = 2
mat[3][0] = 4
mat[3][1] = 8
mat[2][1] = 4
inputs = [int(ele) for ele in input().split()]
for ele in inputs:
    if ele == 1:
        mat = move_up(mat)
    elif ele == 2:
        mat = move_down(mat)
    elif ele == 3:
        mat = move_left(mat)
    else:
        mat = move_right(mat)
    print(mat)
